'use strict';

const express = require(`express`);
const request = require(`supertest`);
const Sequelize = require(`sequelize`);
const {StatusCodes} = require(`http-status-codes`);

const initDB = require(`../lib/init-db`);
const generateData = require(`../lib/generate-data`);
const search = require(`./search`);
const DataService = require(`../data-service/search`);

const mockUsers = [`Андрей Рогов`, `Арсений Петухов`];
const mockCategories = [`Софт`, `Игры`, `Книги`, `Любовные романы`, `Юмор`, `Хит`, `Пословицы`, `Журналы`, `Животные`, `Политика`, `Разное`, `Посуда`];
const mockOffers = [
  {
    categories: [
      `Животные`,
      `Юмор`,
      `Журналы`,
      `Пословицы`,
      `Разное`,
      `Софт`,
      `Хит`,
      `Игры`,
      `Книги`,
      `Любовные романы`,
      `Посуда`
    ],
    comments: [
      {
        text: `А где блок питания? Неплохо, но дорого.`,
        userId: 1
      }
    ],
    description: `Если найдётся хозяин товара, валите всё на нас. Самовывоз в течение дня, вход без масок запрещён. При покупке с меня бесплатная доставка в черте города. Пользовались бережно и только по большим праздникам.`,
    picture: `item15.jpg`,
    title: `Куплю антиквариат`,
    type: `sell`,
    sum: 50750,
    userId: 2
  },
  {
    categories: [
      `Юмор`,
      `Журналы`,
      `Софт`,
      `Политика`,
      `Игры`,
      `Любовные романы`,
      `Разное`
    ],
    comments: [
      {
        text: `А где блок питания? Совсем немного... Оплата наличными или перевод на карту? Почему в таком ужасном состоянии? Продаю в связи с переездом. Отрываю от сердца. С чем связана продажа? Почему так дешёво? А сколько игр в комплекте?`,
        userId: 1
      },
      {
        text: `Почему в таком ужасном состоянии? А где блок питания? А сколько игр в комплекте? Совсем немного... Неплохо, но дорого. Вы что?! В магазине дешевле. Оплата наличными или перевод на карту?`,
        userId: 2
      },
      {
        text: `Неплохо, но дорого. Оплата наличными или перевод на карту? А где блок питания? А сколько игр в комплекте? Вы что?! В магазине дешевле. Почему в таком ужасном состоянии? С чем связана продажа? Почему так дешёво?`,
        userId: 1
      }
    ],
    description: `Самовывоз в течение дня, вход без масок запрещён. При покупке с меня бесплатная доставка в черте города. Скидки в честь Дня конституции. Таких предложений больше нет!`,
    picture: `item13.jpg`,
    title: `Отдам почетные грамоты даром`,
    type: `buy`,
    sum: 58746,
    userId: 1
  },
  {
    categories: [
      `Разное`,
      `Животные`,
      `Любовные романы`,
      `Посуда`,
      `Игры`,
      `Софт`,
      `Журналы`,
      `Пословицы`,
      `Книги`,
      `Юмор`
    ],
    comments: [
      {
        text: `Оплата наличными или перевод на карту? С чем связана продажа? Почему так дешёво? А где блок питания? Совсем немного... Вы что?! В магазине дешевле. А сколько игр в комплекте?`,
        userId: 1
      }
    ],
    description: `Если товар не понравится — верну всё до последней копейки. Это настоящая находка для коллекционера! При покупке с меня бесплатная доставка в черте города. Самовывоз в течение дня, вход без масок запрещён.`,
    picture: `item02.jpg`,
    title: `Научу писать рандомную фигню за 50 рублей`,
    type: `sell`,
    sum: 35101,
    userId: 2
  },
  {
    categories: [
      `Книги`,
      `Животные`,
      `Посуда`,
      `Хит`,
      `Пословицы`,
      `Политика`,
      `Игры`,
      `Юмор`,
      `Журналы`,
      `Софт`,
      `Разное`
    ],
    comments: [
      {
        text: `Оплата наличными или перевод на карту? С чем связана продажа? Почему так дешёво? Почему в таком ужасном состоянии? А сколько игр в комплекте? Неплохо, но дорого. А где блок питания? Вы что?! В магазине дешевле.`,
        userId: 2
      },
      {
        text: `С чем связана продажа? Почему так дешёво? Неплохо, но дорого. Совсем немного... Вы что?! В магазине дешевле. Почему в таком ужасном состоянии? А сколько игр в комплекте? Продаю в связи с переездом. Отрываю от сердца.`,
        userId: 1
      }
    ],
    description: `Продаю с болью в сердце... Таких предложений больше нет! Это настоящая находка для коллекционера! Если товар не понравится — верну всё до последней копейки.`,
    picture: `item11.jpg`,
    title: `Куплю человеческие волосы`,
    type: `sell`,
    sum: 17590,
    userId: 1
  },
  {
    categories: [
      `Политика`,
      `Разное`,
      `Игры`
    ],
    comments: [
      {
        text: `Оплата наличными или перевод на карту? Неплохо, но дорого. А сколько игр в комплекте?`,
        userId: 1
      },
      {
        text: `Вы что?! В магазине дешевле. Почему в таком ужасном состоянии? Продаю в связи с переездом. Отрываю от сердца.`,
        userId: 2
      },
      {
        text: `Вы что?! В магазине дешевле. С чем связана продажа? Почему так дешёво? Почему в таком ужасном состоянии?`,
        userId: 1
      },
      {
        text: `С чем связана продажа? Почему так дешёво? А где блок питания? А сколько игр в комплекте?`,
        userId: 2
      }
    ],
    description: `Пользовались бережно и только по большим праздникам. Если найдётся хозяин товара, валите всё на нас. Самовывоз в течение дня, вход без масок запрещён. Скидки в честь Дня конституции.`,
    picture: `item09.jpg`,
    title: `Куплю человеческие волосы`,
    type: `sell`,
    sum: 20843,
    userId: 2
  }
];

const mockDB = new Sequelize(`sqlite::memory:`, {logging: false});

const app = express();
app.use(express.json());
beforeAll(async () => {
  await initDB(mockDB, generateData({
    categories: mockCategories.slice(),
    offers: mockOffers.slice(),
    users: mockUsers.slice()
  }));
  search(app, new DataService(mockDB));
});

describe(`API returns offer based on search query`, () => {
  let response;

  beforeAll(async () => {
    response = await request(app).get(`/search`).query({
      query: `Куплю человеческие волосы`
    });
  });

  test(`Status code 200`, () => expect(response.statusCode).toBe(StatusCodes.OK));
  test(`2 offers found`, () => expect(response.body.length).toBe(2));
  test(`Offer has correct title`, () => expect(response.body[0].title).toBe(`Куплю человеческие волосы`));
});

test(`API returns code 404 if nothing is found`, () => request(app)
  .get(`/search`)
  .query({
    query: `Продам свою душу`
  })
  .expect(StatusCodes.NOT_FOUND));

test(`API returns 400 when query string is absent`, () => request(app)
  .get(`/search`)
  .expect(StatusCodes.BAD_REQUEST));
